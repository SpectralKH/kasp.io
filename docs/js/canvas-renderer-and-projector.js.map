{"version":3,"sources":["js/canvas-renderer-and-projector.js"],"names":["bgColor","THREE","SpriteCanvasMaterial","parameters","Material","this","type","Color","program","prototype","Object","create","constructor","clone","material","copy","color","CanvasRenderer","console","log","REVISION","_renderData","_lights","_v1","_v3y","_v3","_v1x","_diffuseColor","_uvs","_uv1x","_clearBox","Box2","_uv3y","_this","_projector","Projector","_canvas","_canvasWidth","width","_canvasWidthHalf","Math","_canvasHeight","_canvasHeightHalf","floor","_viewportX","_viewportHeight","_viewportY","_pixelRatio","_viewportWidth","alpha","_clearColor","_context","_contextGlobalAlpha","_contextGlobalCompositeOperation","_contextLineWidth","_clearAlpha","_contextLineCap","_contextStrokeStyle","_contextFillStyle","_contextLineJoin","_contextLineDash","_color","_lightColor","_emissiveColor","_patterns","_clipBox","_ambientLight","_directionalLights","_elemBox","_pointLights","_centroid","Vector3","_vector3","_normal","_normalViewMatrix","Matrix3","rotation","element","fillRect","opacity","restore","blending","scaleX","isSpriteCanvasMaterial","scaleY","scale","y","setFillStyle","getStyle","min","set","v1","x","dist","save","texture","map","pattern","isPointsMaterial","version","translate","undefined","canvas","bitmap","image","ox","offset","oy","height","sx","repeat","sy","cx","cy","setOpacity","setBlending","rotate","beginPath","moveTo","positionScreen","lineTo","vertexColors","colorStyle1","colorStyle2","setStrokeStyle","createLinearGradient","grad","addColorStop","stroke","expandByScalar","linewidth","size","_v2x","v2","_v2y","drawTriangle","_v1y","isLineBasicMaterial","setLineWidth","multiply","setLineJoin","linejoin","VertexColors","positionWorld","calculateLight","isMeshBasicMaterial","mapping","patternPath","envMap","vertexNormalsModel","_uv1y","exception","isLineDashedMaterial","gapSize","wireframe","setLineDash","renderFace3","v3","uv1","uv2","uv3","x0","y0","x1","y1","x2","y2","info","render","vertices","_v3x","closePath","isMeshPhongMaterial","isMeshStandardMaterial","emissive","FaceColors","setLineCap","linecap","add","divideScalar","position","normal","l","ll","light","textureToPattern","isDirectionalLight","matrixWorld","normalize","amount","multiplyScalar","lightPosition","setFromMatrixPosition","dot","subVectors","distanceTo","distance","normalModel","fill","strokePath","wireframeLinewidth","wireframeLinecap","wireframeLinejoin","fillPath","isMeshLambertMaterial","UVMapping","uvs","SphericalReflectionMapping","applyMatrix3","repeatX","wrapS","_uv2x","mirrorX","_uv2y","mirrorY","wrapT","_uv3x","document","createElement","context","setTransform","isMeshNormalMaterial","z","addScalar","setRGB","repeatY","id","idet","u0","offsetX","offsetY","RepeatWrapping","MirroredRepeatWrapping","det","e","v0","getContext","a","drawImage","createPattern","onUpdate","pixels","u1","u2","value","b","c","d","f","globalCompositeOperation","MultiplyBlending","lineWidth","transform","expand","RenderableFace","RenderableVertex","globalAlpha","NormalBlending","vertex","SubtractiveBlending","RenderableLine","RenderableSprite","lineCap","_objectCount","_vertexCount","_vertexPoolLength","_linePool","_sprite","_spritePool","_points3","Array","_viewProjectionMatrix","_modelViewProjectionMatrix","length","vector","project","domElement","autoClear","sortElements","faces","getContextAttributes","updateStyle","style","setViewport","setClearColorHex","setScissorTest","setClearColor","hex","getClearColor","max","warn","getMaxAnisotropy","clear","isEmpty","intersect","makeEmpty","clearRect","clearColor","clearDepth","clearStencil","background","r","g","_elements","scene","camera","isCamera","isColor","renderSprite","_v2","projectScene","elements","setFromPoints","intersectsBox","matrixWorldInverse","lightColor","isAmbientLight","isPointLight","calculateLights","renderLine","overdraw","union","error","RenderableObject","_vertex","object","projectVertex","renderOrder","pushUv","vertexNormalsLength","checkTriangleVisibility","visible","Vector2","Vector4","_vertexPool","applyMatrix4","_line","getNextLineInPool","pushTriangle","side","_face","_object","_lineCount","_spriteCount","_objectPool","_objectPoolLength","fromArray","_facePool","normalMatrix","_linePoolLength","_spritePoolLength","i","_vector4","uv","arguments","_boundingBox","Box3","_viewMatrix","Matrix4","_normalMatrix","setObject","Frustum","checkBackfaceCulling","unprojectVector","lights","renderList","normals","frustumCulled","colors","addObject","children","objects","push","_modelMatrix","_faceCount","w","invW","autoUpdate","multiplyMatrices","projectionMatrix","Mesh","geometry","attributes","positions","projectObject","getNormalMatrix","fl","pushVertex","pushNormal","sort","pushColor","pushLine","clipLine","index","indices","groups","group","start","Geometry","faceVertexUvs","morphTargets","t","tl","pushPoint","sprite","getNextSpriteInPool","abs","getNextVertexInPool","getNextFaceInPool","_facePoolLength","face","line","painterSort","s1","s2","alpha1","alpha2","bc1near","bc2near","bc1far","bc2far","lerp","sortObjects","_frustum","setFromMatrix","Light","BackSide","Line","Points","intersectsObject","Sprite","intersectsSprite","o","BufferGeometry","array","step","_clippedVertex1PositionScreen","count","v","vl","isMultiMaterial","isArray","influence","morphInfluences","targetVertex","materialIndex","getNextObjectInPool","DoubleSide","faceVertexNormals","vertexNormals","n","nl","vertexUvs","u","LineSegments","_clippedVertex2PositionScreen"],"mappings":"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","file":"canvas-renderer-and-projector.js","sourcesContent":["// minOnSave: true, minifier: uglify-js\nvar bgColor = 0xffffff\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nTHREE.SpriteCanvasMaterial = function ( parameters ) {\n\n\tTHREE.Material.call( this );\n\n\tthis.type = 'SpriteCanvasMaterial';\n\n\tthis.color = new THREE.Color( 0xffffff );\n\tthis.program = function () {};\n\n\tthis.setValues( parameters );\n\n};\n\nTHREE.SpriteCanvasMaterial.prototype = Object.create( THREE.Material.prototype );\nTHREE.SpriteCanvasMaterial.prototype.constructor = THREE.SpriteCanvasMaterial;\nTHREE.SpriteCanvasMaterial.prototype.isSpriteCanvasMaterial = true;\n\nTHREE.SpriteCanvasMaterial.prototype.clone = function () {\n\n\tvar material = new THREE.SpriteCanvasMaterial();\n\n\tmaterial.copy( this );\n\tmaterial.color.copy( this.color );\n\tmaterial.program = this.program;\n\n\treturn material;\n\n};\n\n//\n\nTHREE.CanvasRenderer = function ( parameters ) {\n\n\tconsole.log( 'THREE.CanvasRenderer', THREE.REVISION );\n\n\tparameters = parameters || {};\n\n\tvar _this = this,\n\t\t_renderData, _elements, _lights,\n\t\t_projector = new THREE.Projector(),\n\n\t\t_canvas = parameters.canvas !== undefined\n\t\t\t\t ? parameters.canvas\n\t\t\t\t : document.createElement( 'canvas' ),\n\n\t\t_canvasWidth = _canvas.width,\n\t\t_canvasHeight = _canvas.height,\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 ),\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 ),\n\n\t\t_viewportX = 0,\n\t\t_viewportY = 0,\n\t\t_viewportWidth = _canvasWidth,\n\t\t_viewportHeight = _canvasHeight,\n\n\t\t_pixelRatio = 1,\n\n\t\t_context = _canvas.getContext( '2d', {\n\t\t\talpha: parameters.alpha === true\n\t\t} ),\n\n\t\t_clearColor = new THREE.Color( bgColor ),\n\t\t_clearAlpha = parameters.alpha === true ? 0 : 1,\n\n\t\t_contextGlobalAlpha = 1,\n\t\t_contextGlobalCompositeOperation = 0,\n\t\t_contextStrokeStyle = null,\n\t\t_contextFillStyle = null,\n\t\t_contextLineWidth = null,\n\t\t_contextLineCap = null,\n\t\t_contextLineJoin = null,\n\t\t_contextLineDash = [],\n\n\t\t_v1, _v2, _v3,\n\n\t\t_v1x, _v1y, _v2x, _v2y, _v3x, _v3y,\n\n\t\t_color = new THREE.Color(),\n\n\t\t_diffuseColor = new THREE.Color(),\n\t\t_emissiveColor = new THREE.Color(),\n\n\t\t_lightColor = new THREE.Color(),\n\n\t\t_patterns = {},\n\n\t\t_uvs,\n\t\t_uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y,\n\n\t\t_clipBox = new THREE.Box2(),\n\t\t_clearBox = new THREE.Box2(),\n\t\t_elemBox = new THREE.Box2(),\n\n\t\t_ambientLight = new THREE.Color(),\n\t\t_directionalLights = new THREE.Color(),\n\t\t_pointLights = new THREE.Color(),\n\n\t\t_vector3 = new THREE.Vector3(), // Needed for PointLight\n\t\t_centroid = new THREE.Vector3(),\n\t\t_normal = new THREE.Vector3(),\n\t\t_normalViewMatrix = new THREE.Matrix3();\n\n\t/* TODO\n\t_canvas.mozImageSmoothingEnabled = false;\n\t_canvas.webkitImageSmoothingEnabled = false;\n\t_canvas.msImageSmoothingEnabled = false;\n\t_canvas.imageSmoothingEnabled = false;\n\t*/\n\n\t// dash+gap fallbacks for Firefox and everything else\n\n\tif ( _context.setLineDash === undefined ) {\n\n\t\t_context.setLineDash = function () {};\n\n\t}\n\n\tthis.domElement = _canvas;\n\n\tthis.autoClear = true;\n\tthis.sortObjects = true;\n\tthis.sortElements = true;\n\n\tthis.info = {\n\n\t\trender: {\n\n\t\t\tvertices: 0,\n\t\t\tfaces: 0\n\n\t\t}\n\n\t};\n\n\t// API\n\n\tthis.getContext = function () {\n\n\t\treturn _context;\n\n\t};\n\n\tthis.getContextAttributes = function () {\n\n\t\treturn _context.getContextAttributes();\n\n\t};\n\n\tthis.getPixelRatio = function () {\n\n\t\treturn _pixelRatio;\n\n\t};\n\n\tthis.setPixelRatio = function ( value ) {\n\n\t\tif ( value !== undefined ) _pixelRatio = value;\n\n\t};\n\n\tthis.setSize = function ( width, height, updateStyle ) {\n\n\t\t_canvasWidth = width * _pixelRatio;\n\t\t_canvasHeight = height * _pixelRatio;\n\n\t\t_canvas.width = _canvasWidth;\n\t\t_canvas.height = _canvasHeight;\n\n\t\t_canvasWidthHalf = Math.floor( _canvasWidth / 2 );\n\t\t_canvasHeightHalf = Math.floor( _canvasHeight / 2 );\n\n\t\tif ( updateStyle !== false ) {\n\n\t\t\t_canvas.style.width = width + 'px';\n\t\t\t_canvas.style.height = height + 'px';\n\n\t\t}\n\n\t\t_clipBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clipBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t\t_contextGlobalAlpha = 1;\n\t\t_contextGlobalCompositeOperation = 0;\n\t\t_contextStrokeStyle = null;\n\t\t_contextFillStyle = null;\n\t\t_contextLineWidth = null;\n\t\t_contextLineCap = null;\n\t\t_contextLineJoin = null;\n\n\t\tthis.setViewport( 0, 0, width, height );\n\n\t};\n\n\tthis.setViewport = function ( x, y, width, height ) {\n\n\t\t_viewportX = x * _pixelRatio;\n\t\t_viewportY = y * _pixelRatio;\n\n\t\t_viewportWidth = width * _pixelRatio;\n\t\t_viewportHeight = height * _pixelRatio;\n\n\t};\n\n\tthis.setScissor = function () {};\n\tthis.setScissorTest = function () {};\n\n\tthis.setClearColor = function ( color, alpha ) {\n\n\t\t_clearColor.set( color );\n\t\t_clearAlpha = alpha !== undefined ? alpha : 1;\n\n\t\t_clearBox.min.set( - _canvasWidthHalf, - _canvasHeightHalf );\n\t\t_clearBox.max.set(   _canvasWidthHalf,   _canvasHeightHalf );\n\n\t};\n\n\tthis.setClearColorHex = function ( hex, alpha ) {\n\n\t\tconsole.warn( 'THREE.CanvasRenderer: .setClearColorHex() is being removed. Use .setClearColor() instead.' );\n\t\tthis.setClearColor( hex, alpha );\n\n\t};\n\n\tthis.getClearColor = function () {\n\n\t\treturn _clearColor;\n\n\t};\n\n\tthis.getClearAlpha = function () {\n\n\t\treturn _clearAlpha;\n\n\t};\n\n\tthis.getMaxAnisotropy = function () {\n\n\t\treturn 0;\n\n\t};\n\n\tthis.clear = function () {\n\n\t\tif ( _clearBox.isEmpty() === false ) {\n\n\t\t\t_clearBox.intersect( _clipBox );\n\t\t\t_clearBox.expandByScalar( 2 );\n\n\t\t\t_clearBox.min.x =   _clearBox.min.x + _canvasWidthHalf;\n\t\t\t_clearBox.min.y = - _clearBox.min.y + _canvasHeightHalf;\t\t// higher y value !\n\t\t\t_clearBox.max.x =   _clearBox.max.x + _canvasWidthHalf;\n\t\t\t_clearBox.max.y = - _clearBox.max.y + _canvasHeightHalf;\t\t// lower y value !\n\n\t\t\tif ( _clearAlpha < 1 ) {\n\n\t\t\t\t_context.clearRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( _clearAlpha > 0 ) {\n\n\t\t\t\tsetOpacity( 1 );\n\t\t\t\tsetBlending( THREE.NormalBlending );\n\n\t\t\t\tsetFillStyle( 'rgba(' + Math.floor( _clearColor.r * 255 ) + ',' + Math.floor( _clearColor.g * 255 ) + ',' + Math.floor( _clearColor.b * 255 ) + ',' + _clearAlpha + ')' );\n\n\t\t\t\t_context.fillRect(\n\t\t\t\t\t_clearBox.min.x | 0,\n\t\t\t\t\t_clearBox.max.y | 0,\n\t\t\t\t\t( _clearBox.max.x - _clearBox.min.x ) | 0,\n\t\t\t\t\t( _clearBox.min.y - _clearBox.max.y ) | 0\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t_clearBox.makeEmpty();\n\n\t\t}\n\n\t};\n\n\t// compatibility\n\n\tthis.clearColor = function () {};\n\tthis.clearDepth = function () {};\n\tthis.clearStencil = function () {};\n\n\tthis.render = function ( scene, camera ) {\n\n\t\tif ( camera.isCamera === undefined ) {\n\n\t\t\tconsole.error( 'THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar background = scene.background;\n\n\t\tif ( background && background.isColor ) {\n\n\t\t\tsetOpacity( 1 );\n\t\t\tsetBlending( THREE.NormalBlending );\n\n\t\t\tsetFillStyle( background.getStyle() );\n\t\t\t_context.fillRect( 0, 0, _canvasWidth, _canvasHeight );\n\n\t\t} else if ( this.autoClear === true ) {\n\n\t\t\tthis.clear();\n\n\t\t}\n\n\t\t_this.info.render.vertices = 0;\n\t\t_this.info.render.faces = 0;\n\n\t\t_context.setTransform( _viewportWidth / _canvasWidth, 0, 0, - _viewportHeight / _canvasHeight, _viewportX, _canvasHeight - _viewportY );\n\t\t_context.translate( _canvasWidthHalf, _canvasHeightHalf );\n\n\t\t_renderData = _projector.projectScene( scene, camera, this.sortObjects, this.sortElements );\n\t\t_elements = _renderData.elements;\n\t\t_lights = _renderData.lights;\n\n\t\t_normalViewMatrix.getNormalMatrix( camera.matrixWorldInverse );\n\n\t\t/* DEBUG\n\t\tsetFillStyle( 'rgba( 0, 255, 255, 0.5 )' );\n\t\t_context.fillRect( _clipBox.min.x, _clipBox.min.y, _clipBox.max.x - _clipBox.min.x, _clipBox.max.y - _clipBox.min.y );\n\t\t*/\n\n\t\tcalculateLights();\n\n\t\tfor ( var e = 0, el = _elements.length; e < el; e ++ ) {\n\n\t\t\tvar element = _elements[ e ];\n\n\t\t\tvar material = element.material;\n\n\t\t\tif ( material === undefined || material.opacity === 0 ) continue;\n\n\t\t\t_elemBox.makeEmpty();\n\n\t\t\tif ( element instanceof THREE.RenderableSprite ) {\n\n\t\t\t\t_v1 = element;\n\t\t\t\t_v1.x *= _canvasWidthHalf; _v1.y *= _canvasHeightHalf;\n\n\t\t\t\trenderSprite( _v1, element, material );\n\n\t\t\t} else if ( element instanceof THREE.RenderableLine ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderLine( _v1, _v2, element, material );\n\n\t\t\t\t}\n\n\t\t\t} else if ( element instanceof THREE.RenderableFace ) {\n\n\t\t\t\t_v1 = element.v1; _v2 = element.v2; _v3 = element.v3;\n\n\t\t\t\tif ( _v1.positionScreen.z < - 1 || _v1.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v2.positionScreen.z < - 1 || _v2.positionScreen.z > 1 ) continue;\n\t\t\t\tif ( _v3.positionScreen.z < - 1 || _v3.positionScreen.z > 1 ) continue;\n\n\t\t\t\t_v1.positionScreen.x *= _canvasWidthHalf; _v1.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v2.positionScreen.x *= _canvasWidthHalf; _v2.positionScreen.y *= _canvasHeightHalf;\n\t\t\t\t_v3.positionScreen.x *= _canvasWidthHalf; _v3.positionScreen.y *= _canvasHeightHalf;\n\n\t\t\t\tif ( material.overdraw > 0 ) {\n\n\t\t\t\t\texpand( _v1.positionScreen, _v2.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v2.positionScreen, _v3.positionScreen, material.overdraw );\n\t\t\t\t\texpand( _v3.positionScreen, _v1.positionScreen, material.overdraw );\n\n\t\t\t\t}\n\n\t\t\t\t_elemBox.setFromPoints( [\n\t\t\t\t\t_v1.positionScreen,\n\t\t\t\t\t_v2.positionScreen,\n\t\t\t\t\t_v3.positionScreen\n\t\t\t\t] );\n\n\t\t\t\tif ( _clipBox.intersectsBox( _elemBox ) === true ) {\n\n\t\t\t\t\trenderFace3( _v1, _v2, _v3, 0, 1, 2, element, material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t/* DEBUG\n\t\t\tsetLineWidth( 1 );\n\t\t\tsetStrokeStyle( 'rgba( 0, 255, 0, 0.5 )' );\n\t\t\t_context.strokeRect( _elemBox.min.x, _elemBox.min.y, _elemBox.max.x - _elemBox.min.x, _elemBox.max.y - _elemBox.min.y );\n\t\t\t*/\n\n\t\t\t_clearBox.union( _elemBox );\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetLineWidth( 1 );\n\t\tsetStrokeStyle( 'rgba( 255, 0, 0, 0.5 )' );\n\t\t_context.strokeRect( _clearBox.min.x, _clearBox.min.y, _clearBox.max.x - _clearBox.min.x, _clearBox.max.y - _clearBox.min.y );\n\t\t*/\n\n\t\t_context.setTransform( 1, 0, 0, 1, 0, 0 );\n\n\t};\n\n\t//\n\n\tfunction calculateLights() {\n\n\t\t_ambientLight.setRGB( 0, 0, 0 );\n\t\t_directionalLights.setRGB( 0, 0, 0 );\n\t\t_pointLights.setRGB( 0, 0, 0 );\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\t\t\tvar lightColor = light.color;\n\n\t\t\tif ( light.isAmbientLight ) {\n\n\t\t\t\t_ambientLight.add( lightColor );\n\n\t\t\t} else if ( light.isDirectionalLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_directionalLights.add( lightColor );\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\t// for sprites\n\n\t\t\t\t_pointLights.add( lightColor );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction calculateLight( position, normal, color ) {\n\n\t\tfor ( var l = 0, ll = _lights.length; l < ll; l ++ ) {\n\n\t\t\tvar light = _lights[ l ];\n\n\t\t\t_lightColor.copy( light.color );\n\n\t\t\tif ( light.isDirectionalLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld ).normalize();\n\n\t\t\t\tvar amount = normal.dot( lightPosition );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t} else if ( light.isPointLight ) {\n\n\t\t\t\tvar lightPosition = _vector3.setFromMatrixPosition( light.matrixWorld );\n\n\t\t\t\tvar amount = normal.dot( _vector3.subVectors( lightPosition, position ).normalize() );\n\n\t\t\t\tif ( amount <= 0 ) continue;\n\n\t\t\t\tamount *= light.distance == 0 ? 1 : 1 - Math.min( position.distanceTo( lightPosition ) / light.distance, 1 );\n\n\t\t\t\tif ( amount == 0 ) continue;\n\n\t\t\t\tamount *= light.intensity;\n\n\t\t\t\tcolor.add( _lightColor.multiplyScalar( amount ) );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderSprite( v1, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\tvar scaleX = element.scale.x * _canvasWidthHalf;\n\t\tvar scaleY = element.scale.y * _canvasHeightHalf;\n\n\t\tvar dist = Math.sqrt( scaleX * scaleX + scaleY * scaleY ); // allow for rotated sprite\n\t\t_elemBox.min.set( v1.x - dist, v1.y - dist );\n\t\t_elemBox.max.set( v1.x + dist, v1.y + dist );\n\n\t\tif ( material.isSpriteMaterial ) {\n\n\t\t\tvar texture = material.map;\n\n\t\t\tif ( texture !== null ) {\n\n\t\t\t\tvar pattern = _patterns[ texture.id ];\n\n\t\t\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\t\t\tpattern = textureToPattern( texture );\n\t\t\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t\t\t}\n\n\t\t\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t\t\t\tvar bitmap = texture.image;\n\n\t\t\t\t\tvar ox = bitmap.width * texture.offset.x;\n\t\t\t\t\tvar oy = bitmap.height * texture.offset.y;\n\n\t\t\t\t\tvar sx = bitmap.width * texture.repeat.x;\n\t\t\t\t\tvar sy = bitmap.height * texture.repeat.y;\n\n\t\t\t\t\tvar cx = scaleX / sx;\n\t\t\t\t\tvar cy = scaleY / sy;\n\n\t\t\t\t\t_context.save();\n\t\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t\t_context.translate( - scaleX / 2, - scaleY / 2 );\n\t\t\t\t\t_context.scale( cx, cy );\n\t\t\t\t\t_context.translate( - ox, - oy );\n\t\t\t\t\t_context.fillRect( ox, oy, sx, sy );\n\t\t\t\t\t_context.restore();\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// no texture\n\n\t\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t\t_context.save();\n\t\t\t\t_context.translate( v1.x, v1.y );\n\t\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t\t_context.scale( scaleX, - scaleY );\n\t\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t\t_context.restore();\n\n\t\t\t}\n\n\t\t} else if ( material.isSpriteCanvasMaterial ) {\n\n\t\t\tsetStrokeStyle( material.color.getStyle() );\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX, scaleY );\n\n\t\t\tmaterial.program( _context );\n\n\t\t\t_context.restore();\n\n\t\t} else if ( material.isPointsMaterial ) {\n\n\t\t\tsetFillStyle( material.color.getStyle() );\n\n\t\t\t_context.save();\n\t\t\t_context.translate( v1.x, v1.y );\n\t\t\tif ( material.rotation !== 0 ) _context.rotate( material.rotation );\n\t\t\t_context.scale( scaleX * material.size, - scaleY * material.size );\n\t\t\t_context.fillRect( - 0.5, - 0.5, 1, 1 );\n\t\t\t_context.restore();\n\n\t\t}\n\n\t\t/* DEBUG\n\t\tsetStrokeStyle( 'rgb(255,255,0)' );\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.x - 10, v1.y );\n\t\t_context.lineTo( v1.x + 10, v1.y );\n\t\t_context.moveTo( v1.x, v1.y - 10 );\n\t\t_context.lineTo( v1.x, v1.y + 10 );\n\t\t_context.stroke();\n\t\t*/\n\n\t}\n\n\tfunction renderLine( v1, v2, element, material ) {\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( v1.positionScreen.x, v1.positionScreen.y );\n\t\t_context.lineTo( v2.positionScreen.x, v2.positionScreen.y );\n\n\t\tif ( material.isLineBasicMaterial ) {\n\n\t\t\tsetLineWidth( material.linewidth );\n\t\t\tsetLineCap( material.linecap );\n\t\t\tsetLineJoin( material.linejoin );\n\n\t\t\tif ( material.vertexColors !== THREE.VertexColors ) {\n\n\t\t\t\tsetStrokeStyle( material.color.getStyle() );\n\n\t\t\t} else {\n\n\t\t\t\tvar colorStyle1 = element.vertexColors[ 0 ].getStyle();\n\t\t\t\tvar colorStyle2 = element.vertexColors[ 1 ].getStyle();\n\n\t\t\t\tif ( colorStyle1 === colorStyle2 ) {\n\n\t\t\t\t\tsetStrokeStyle( colorStyle1 );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar grad = _context.createLinearGradient(\n\t\t\t\t\t\t\tv1.positionScreen.x,\n\t\t\t\t\t\t\tv1.positionScreen.y,\n\t\t\t\t\t\t\tv2.positionScreen.x,\n\t\t\t\t\t\t\tv2.positionScreen.y\n\t\t\t\t\t\t);\n\t\t\t\t\t\tgrad.addColorStop( 0, colorStyle1 );\n\t\t\t\t\t\tgrad.addColorStop( 1, colorStyle2 );\n\n\t\t\t\t\t} catch ( exception ) {\n\n\t\t\t\t\t\tgrad = colorStyle1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tsetStrokeStyle( grad );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\tsetLineDash( [ material.dashSize, material.gapSize ] );\n\n\t\t\t}\n\n\t\t\t_context.stroke();\n\t\t\t_elemBox.expandByScalar( material.linewidth * 2 );\n\n\t\t\tif ( material.isLineDashedMaterial ) {\n\n\t\t\t\tsetLineDash( [] );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction renderFace3( v1, v2, v3, uv1, uv2, uv3, element, material ) {\n\n\t\t_this.info.render.vertices += 3;\n\t\t_this.info.render.faces ++;\n\n\t\tsetOpacity( material.opacity );\n\t\tsetBlending( material.blending );\n\n\t\t_v1x = v1.positionScreen.x; _v1y = v1.positionScreen.y;\n\t\t_v2x = v2.positionScreen.x; _v2y = v2.positionScreen.y;\n\t\t_v3x = v3.positionScreen.x; _v3y = v3.positionScreen.y;\n\n\t\tdrawTriangle( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y );\n\n\t\tif ( ( material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) && material.map === null ) {\n\n\t\t\t_diffuseColor.copy( material.color );\n\t\t\t_emissiveColor.copy( material.emissive );\n\n\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t_diffuseColor.multiply( element.color );\n\n\t\t\t}\n\n\t\t\t_color.copy( _ambientLight );\n\n\t\t\t_centroid.copy( v1.positionWorld ).add( v2.positionWorld ).add( v3.positionWorld ).divideScalar( 3 );\n\n\t\t\tcalculateLight( _centroid, element.normalModel, _color );\n\n\t\t\t_color.multiply( _diffuseColor ).add( _emissiveColor );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else if ( material.isMeshBasicMaterial || material.isMeshLambertMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial ) {\n\n\t\t\tif ( material.map !== null ) {\n\n\t\t\t\tvar mapping = material.map.mapping;\n\n\t\t\t\tif ( mapping === THREE.UVMapping ) {\n\n\t\t\t\t\t_uvs = element.uvs;\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uvs[ uv1 ].x, _uvs[ uv1 ].y, _uvs[ uv2 ].x, _uvs[ uv2 ].y, _uvs[ uv3 ].x, _uvs[ uv3 ].y, material.map );\n\n\t\t\t\t}\n\n\t\t\t} else if ( material.envMap !== null ) {\n\n\t\t\t\tif ( material.envMap.mapping === THREE.SphericalReflectionMapping ) {\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv1 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv1x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv1y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv2 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv2x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv2y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\t_normal.copy( element.vertexNormalsModel[ uv3 ] ).applyMatrix3( _normalViewMatrix );\n\t\t\t\t\t_uv3x = 0.5 * _normal.x + 0.5;\n\t\t\t\t\t_uv3y = 0.5 * _normal.y + 0.5;\n\n\t\t\t\t\tpatternPath( _v1x, _v1y, _v2x, _v2y, _v3x, _v3y, _uv1x, _uv1y, _uv2x, _uv2y, _uv3x, _uv3y, material.envMap );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t_color.copy( material.color );\n\n\t\t\t\tif ( material.vertexColors === THREE.FaceColors ) {\n\n\t\t\t\t\t_color.multiply( element.color );\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.wireframe === true\n\t\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t\t : fillPath( _color );\n\n\t\t\t}\n\n\t\t} else if ( material.isMeshNormalMaterial ) {\n\n\t\t\t_normal.copy( element.normalModel ).applyMatrix3( _normalViewMatrix );\n\n\t\t\t_color.setRGB( _normal.x, _normal.y, _normal.z ).multiplyScalar( 0.5 ).addScalar( 0.5 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t} else {\n\n\t\t\t_color.setRGB( 1, 1, 1 );\n\n\t\t\tmaterial.wireframe === true\n\t\t\t\t ? strokePath( _color, material.wireframeLinewidth, material.wireframeLinecap, material.wireframeLinejoin )\n\t\t\t\t : fillPath( _color );\n\n\t\t}\n\n\t}\n\n\t//\n\n\tfunction drawTriangle( x0, y0, x1, y1, x2, y2 ) {\n\n\t\t_context.beginPath();\n\t\t_context.moveTo( x0, y0 );\n\t\t_context.lineTo( x1, y1 );\n\t\t_context.lineTo( x2, y2 );\n\t\t_context.closePath();\n\n\t}\n\n\tfunction strokePath( color, linewidth, linecap, linejoin ) {\n\n\t\tsetLineWidth( linewidth );\n\t\tsetLineCap( linecap );\n\t\tsetLineJoin( linejoin );\n\t\tsetStrokeStyle( color.getStyle() );\n\n\t\t_context.stroke();\n\n\t\t_elemBox.expandByScalar( linewidth * 2 );\n\n\t}\n\n\tfunction fillPath( color ) {\n\n\t\tsetFillStyle( color.getStyle() );\n\t\t_context.fill();\n\n\t}\n\n\tfunction textureToPattern( texture ) {\n\n\t\tif ( texture.version === 0 ||\n\t\t\ttexture instanceof THREE.CompressedTexture ||\n\t\t\ttexture instanceof THREE.DataTexture ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: texture.version\n\t\t\t};\n\n\t\t}\n\n\t\tvar image = texture.image;\n\n\t\tif ( image.complete === false ) {\n\n\t\t\treturn {\n\t\t\t\tcanvas: undefined,\n\t\t\t\tversion: 0\n\t\t\t};\n\n\t\t}\n\n\t\tvar repeatX = texture.wrapS === THREE.RepeatWrapping || texture.wrapS === THREE.MirroredRepeatWrapping;\n\t\tvar repeatY = texture.wrapT === THREE.RepeatWrapping || texture.wrapT === THREE.MirroredRepeatWrapping;\n\n\t\tvar mirrorX = texture.wrapS === THREE.MirroredRepeatWrapping;\n\t\tvar mirrorY = texture.wrapT === THREE.MirroredRepeatWrapping;\n\n\t\t//\n\n\t\tvar canvas = document.createElement( 'canvas' );\n\t\tcanvas.width = image.width * ( mirrorX ? 2 : 1 );\n\t\tcanvas.height = image.height * ( mirrorY ? 2 : 1 );\n\n\t\tvar context = canvas.getContext( '2d' );\n\t\tcontext.setTransform( 1, 0, 0, - 1, 0, image.height );\n\t\tcontext.drawImage( image, 0, 0 );\n\n\t\tif ( mirrorX === true ) {\n\n\t\t\tcontext.setTransform( - 1, 0, 0, - 1, image.width, image.height );\n\t\t\tcontext.drawImage( image, - image.width, 0 );\n\n\t\t}\n\n\t\tif ( mirrorY === true ) {\n\n\t\t\tcontext.setTransform( 1, 0, 0, 1, 0, 0 );\n\t\t\tcontext.drawImage( image, 0, image.height );\n\n\t\t}\n\n\t\tif ( mirrorX === true && mirrorY === true ) {\n\n\t\t\tcontext.setTransform( - 1, 0, 0, 1, image.width, 0 );\n\t\t\tcontext.drawImage( image, - image.width, image.height );\n\n\t\t}\n\n\t\tvar repeat = 'no-repeat';\n\n\t\tif ( repeatX === true && repeatY === true ) {\n\n\t\t\trepeat = 'repeat';\n\n\t\t} else if ( repeatX === true ) {\n\n\t\t\trepeat = 'repeat-x';\n\n\t\t} else if ( repeatY === true ) {\n\n\t\t\trepeat = 'repeat-y';\n\n\t\t}\n\n\t\tvar pattern = _context.createPattern( canvas, repeat );\n\n\t\tif ( texture.onUpdate ) texture.onUpdate( texture );\n\n\t\treturn {\n\t\t\tcanvas: pattern,\n\t\t\tversion: texture.version\n\t\t};\n\n\t}\n\n\tfunction patternPath( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, texture ) {\n\n\t\tvar pattern = _patterns[ texture.id ];\n\n\t\tif ( pattern === undefined || pattern.version !== texture.version ) {\n\n\t\t\tpattern = textureToPattern( texture );\n\t\t\t_patterns[ texture.id ] = pattern;\n\n\t\t}\n\n\t\tif ( pattern.canvas !== undefined ) {\n\n\t\t\tsetFillStyle( pattern.canvas );\n\n\t\t} else {\n\n\t\t\tsetFillStyle( 'rgba( 0, 0, 0, 1)' );\n\t\t\t_context.fill();\n\t\t\treturn;\n\n\t\t}\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\t\toffsetX = texture.offset.x / texture.repeat.x,\n\t\t\toffsetY = texture.offset.y / texture.repeat.y,\n\t\t\twidth = texture.image.width * texture.repeat.x,\n\t\t\theight = texture.image.height * texture.repeat.y;\n\n\t\tu0 = ( u0 + offsetX ) * width;\n\t\tv0 = ( v0 + offsetY ) * height;\n\n\t\tu1 = ( u1 + offsetX ) * width;\n\t\tv1 = ( v1 + offsetY ) * height;\n\n\t\tu2 = ( u2 + offsetX ) * width;\n\t\tv2 = ( v2 + offsetY ) * height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.fill();\n\t\t_context.restore();\n\n\t}\n\n\t/*\n\tfunction clipImage( x0, y0, x1, y1, x2, y2, u0, v0, u1, v1, u2, v2, image ) {\n\n\t\t// http://extremelysatisfactorytotalitarianism.com/blog/?p=2120\n\n\t\tvar a, b, c, d, e, f, det, idet,\n\t\twidth = image.width - 1,\n\t\theight = image.height - 1;\n\n\t\tu0 *= width; v0 *= height;\n\t\tu1 *= width; v1 *= height;\n\t\tu2 *= width; v2 *= height;\n\n\t\tx1 -= x0; y1 -= y0;\n\t\tx2 -= x0; y2 -= y0;\n\n\t\tu1 -= u0; v1 -= v0;\n\t\tu2 -= u0; v2 -= v0;\n\n\t\tdet = u1 * v2 - u2 * v1;\n\n\t\tidet = 1 / det;\n\n\t\ta = ( v2 * x1 - v1 * x2 ) * idet;\n\t\tb = ( v2 * y1 - v1 * y2 ) * idet;\n\t\tc = ( u1 * x2 - u2 * x1 ) * idet;\n\t\td = ( u1 * y2 - u2 * y1 ) * idet;\n\n\t\te = x0 - a * u0 - c * v0;\n\t\tf = y0 - b * u0 - d * v0;\n\n\t\t_context.save();\n\t\t_context.transform( a, b, c, d, e, f );\n\t\t_context.clip();\n\t\t_context.drawImage( image, 0, 0 );\n\t\t_context.restore();\n\n\t}\n\t*/\n\n\t// Hide anti-alias gaps\n\n\tfunction expand( v1, v2, pixels ) {\n\n\t\tvar x = v2.x - v1.x, y = v2.y - v1.y,\n\t\t\tdet = x * x + y * y, idet;\n\n\t\tif ( det === 0 ) return;\n\n\t\tidet = pixels / Math.sqrt( det );\n\n\t\tx *= idet; y *= idet;\n\n\t\tv2.x += x; v2.y += y;\n\t\tv1.x -= x; v1.y -= y;\n\n\t}\n\n\t// Context cached methods.\n\n\tfunction setOpacity( value ) {\n\n\t\tif ( _contextGlobalAlpha !== value ) {\n\n\t\t\t_context.globalAlpha = value;\n\t\t\t_contextGlobalAlpha = value;\n\n\t\t}\n\n\t}\n\n\tfunction setBlending( value ) {\n\n\t\tif ( _contextGlobalCompositeOperation !== value ) {\n\n\t\t\tif ( value === THREE.NormalBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'source-over';\n\n\t\t\t} else if ( value === THREE.AdditiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'lighter';\n\n\t\t\t} else if ( value === THREE.SubtractiveBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'darker';\n\n\t\t\t} else if ( value === THREE.MultiplyBlending ) {\n\n\t\t\t\t_context.globalCompositeOperation = 'multiply';\n\n\t\t\t}\n\n\t\t\t_contextGlobalCompositeOperation = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineWidth( value ) {\n\n\t\tif ( _contextLineWidth !== value ) {\n\n\t\t\t_context.lineWidth = value;\n\t\t\t_contextLineWidth = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineCap( value ) {\n\n\t\t// \"butt\", \"round\", \"square\"\n\n\t\tif ( _contextLineCap !== value ) {\n\n\t\t\t_context.lineCap = value;\n\t\t\t_contextLineCap = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineJoin( value ) {\n\n\t\t// \"round\", \"bevel\", \"miter\"\n\n\t\tif ( _contextLineJoin !== value ) {\n\n\t\t\t_context.lineJoin = value;\n\t\t\t_contextLineJoin = value;\n\n\t\t}\n\n\t}\n\n\tfunction setStrokeStyle( value ) {\n\n\t\tif ( _contextStrokeStyle !== value ) {\n\n\t\t\t_context.strokeStyle = value;\n\t\t\t_contextStrokeStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setFillStyle( value ) {\n\n\t\tif ( _contextFillStyle !== value ) {\n\n\t\t\t_context.fillStyle = value;\n\t\t\t_contextFillStyle = value;\n\n\t\t}\n\n\t}\n\n\tfunction setLineDash( value ) {\n\n\t\tif ( _contextLineDash.length !== value.length ) {\n\n\t\t\t_context.setLineDash( value );\n\t\t\t_contextLineDash = value;\n\n\t\t}\n\n\t}\n\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author julianwa / https://github.com/julianwa\n */\n\nTHREE.RenderableObject = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableFace = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\tthis.v3 = new THREE.RenderableVertex();\n\n\tthis.normalModel = new THREE.Vector3();\n\n\tthis.vertexNormalsModel = [ new THREE.Vector3(), new THREE.Vector3(), new THREE.Vector3() ];\n\tthis.vertexNormalsLength = 0;\n\n\tthis.color = new THREE.Color();\n\tthis.material = null;\n\tthis.uvs = [ new THREE.Vector2(), new THREE.Vector2(), new THREE.Vector2() ];\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableVertex = function () {\n\n\tthis.position = new THREE.Vector3();\n\tthis.positionWorld = new THREE.Vector3();\n\tthis.positionScreen = new THREE.Vector4();\n\n\tthis.visible = true;\n\n};\n\nTHREE.RenderableVertex.prototype.copy = function ( vertex ) {\n\n\tthis.positionWorld.copy( vertex.positionWorld );\n\tthis.positionScreen.copy( vertex.positionScreen );\n\n};\n\n//\n\nTHREE.RenderableLine = function () {\n\n\tthis.id = 0;\n\n\tthis.v1 = new THREE.RenderableVertex();\n\tthis.v2 = new THREE.RenderableVertex();\n\n\tthis.vertexColors = [ new THREE.Color(), new THREE.Color() ];\n\tthis.material = null;\n\n\tthis.z = 0;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.RenderableSprite = function () {\n\n\tthis.id = 0;\n\n\tthis.object = null;\n\n\tthis.x = 0;\n\tthis.y = 0;\n\tthis.z = 0;\n\n\tthis.rotation = 0;\n\tthis.scale = new THREE.Vector2();\n\n\tthis.material = null;\n\tthis.renderOrder = 0;\n\n};\n\n//\n\nTHREE.Projector = function () {\n\n\tvar _object, _objectCount, _objectPool = [], _objectPoolLength = 0,\n\t\t_vertex, _vertexCount, _vertexPool = [], _vertexPoolLength = 0,\n\t\t_face, _faceCount, _facePool = [], _facePoolLength = 0,\n\t\t_line, _lineCount, _linePool = [], _linePoolLength = 0,\n\t\t_sprite, _spriteCount, _spritePool = [], _spritePoolLength = 0,\n\n\t\t_renderData = { objects: [], lights: [], elements: [] },\n\n\t\t_vector3 = new THREE.Vector3(),\n\t\t_vector4 = new THREE.Vector4(),\n\n\t\t_clipBox = new THREE.Box3( new THREE.Vector3( - 1, - 1, - 1 ), new THREE.Vector3( 1, 1, 1 ) ),\n\t\t_boundingBox = new THREE.Box3(),\n\t\t_points3 = new Array( 3 ),\n\n\t\t_viewMatrix = new THREE.Matrix4(),\n\t\t_viewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_modelMatrix,\n\t\t_modelViewProjectionMatrix = new THREE.Matrix4(),\n\n\t\t_normalMatrix = new THREE.Matrix3(),\n\n\t\t_frustum = new THREE.Frustum(),\n\n\t\t_clippedVertex1PositionScreen = new THREE.Vector4(),\n\t\t_clippedVertex2PositionScreen = new THREE.Vector4();\n\n\t//\n\n\tthis.projectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .projectVector() is now vector.project().' );\n\t\tvector.project( camera );\n\n\t};\n\n\tthis.unprojectVector = function ( vector, camera ) {\n\n\t\tconsole.warn( 'THREE.Projector: .unprojectVector() is now vector.unproject().' );\n\t\tvector.unproject( camera );\n\n\t};\n\n\tthis.pickingRay = function () {\n\n\t\tconsole.error( 'THREE.Projector: .pickingRay() is now raycaster.setFromCamera().' );\n\n\t};\n\n\t//\n\n\tvar RenderList = function () {\n\n\t\tvar normals = [];\n\t\tvar colors = [];\n\t\tvar uvs = [];\n\n\t\tvar object = null;\n\t\tvar material = null;\n\n\t\tvar normalMatrix = new THREE.Matrix3();\n\n\t\tfunction setObject( value ) {\n\n\t\t\tobject = value;\n\t\t\tmaterial = object.material;\n\n\t\t\tnormalMatrix.getNormalMatrix( object.matrixWorld );\n\n\t\t\tnormals.length = 0;\n\t\t\tcolors.length = 0;\n\t\t\tuvs.length = 0;\n\n\t\t}\n\n\t\tfunction projectVertex( vertex ) {\n\n\t\t\tvar position = vertex.position;\n\t\t\tvar positionWorld = vertex.positionWorld;\n\t\t\tvar positionScreen = vertex.positionScreen;\n\n\t\t\tpositionWorld.copy( position ).applyMatrix4( _modelMatrix );\n\t\t\tpositionScreen.copy( positionWorld ).applyMatrix4( _viewProjectionMatrix );\n\n\t\t\tvar invW = 1 / positionScreen.w;\n\n\t\t\tpositionScreen.x *= invW;\n\t\t\tpositionScreen.y *= invW;\n\t\t\tpositionScreen.z *= invW;\n\n\t\t\tvertex.visible = positionScreen.x >= - 1 && positionScreen.x <= 1 &&\n\t\t\t\t\t positionScreen.y >= - 1 && positionScreen.y <= 1 &&\n\t\t\t\t\t positionScreen.z >= - 1 && positionScreen.z <= 1;\n\n\t\t}\n\n\t\tfunction pushVertex( x, y, z ) {\n\n\t\t\t_vertex = getNextVertexInPool();\n\t\t\t_vertex.position.set( x, y, z );\n\n\t\t\tprojectVertex( _vertex );\n\n\t\t}\n\n\t\tfunction pushNormal( x, y, z ) {\n\n\t\t\tnormals.push( x, y, z );\n\n\t\t}\n\n\t\tfunction pushColor( r, g, b ) {\n\n\t\t\tcolors.push( r, g, b );\n\n\t\t}\n\n\t\tfunction pushUv( x, y ) {\n\n\t\t\tuvs.push( x, y );\n\n\t\t}\n\n\t\tfunction checkTriangleVisibility( v1, v2, v3 ) {\n\n\t\t\tif ( v1.visible === true || v2.visible === true || v3.visible === true ) return true;\n\n\t\t\t_points3[ 0 ] = v1.positionScreen;\n\t\t\t_points3[ 1 ] = v2.positionScreen;\n\t\t\t_points3[ 2 ] = v3.positionScreen;\n\n\t\t\treturn _clipBox.intersectsBox( _boundingBox.setFromPoints( _points3 ) );\n\n\t\t}\n\n\t\tfunction checkBackfaceCulling( v1, v2, v3 ) {\n\n\t\t\treturn ( ( v3.positionScreen.x - v1.positionScreen.x ) *\n\t\t\t\t    ( v2.positionScreen.y - v1.positionScreen.y ) -\n\t\t\t\t    ( v3.positionScreen.y - v1.positionScreen.y ) *\n\t\t\t\t    ( v2.positionScreen.x - v1.positionScreen.x ) ) < 0;\n\n\t\t}\n\n\t\tfunction pushLine( a, b ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\n\t\t\t// Clip\n\n\t\t\tv1.positionScreen.copy( v1.position ).applyMatrix4( _modelViewProjectionMatrix );\n\t\t\tv2.positionScreen.copy( v2.position ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\tif ( clipLine( v1.positionScreen, v2.positionScreen ) === true ) {\n\n\t\t\t\t// Perform the perspective divide\n\t\t\t\tv1.positionScreen.multiplyScalar( 1 / v1.positionScreen.w );\n\t\t\t\tv2.positionScreen.multiplyScalar( 1 / v2.positionScreen.w );\n\n\t\t\t\t_line = getNextLineInPool();\n\t\t\t\t_line.id = object.id;\n\t\t\t\t_line.v1.copy( v1 );\n\t\t\t\t_line.v2.copy( v2 );\n\t\t\t\t_line.z = Math.max( v1.positionScreen.z, v2.positionScreen.z );\n\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t_line.material = object.material;\n\n\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t_line.vertexColors[ 0 ].fromArray( colors, a * 3 );\n\t\t\t\t\t_line.vertexColors[ 1 ].fromArray( colors, b * 3 );\n\n\t\t\t\t}\n\n\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction pushTriangle( a, b, c ) {\n\n\t\t\tvar v1 = _vertexPool[ a ];\n\t\t\tvar v2 = _vertexPool[ b ];\n\t\t\tvar v3 = _vertexPool[ c ];\n\n\t\t\tif ( checkTriangleVisibility( v1, v2, v3 ) === false ) return;\n\n\t\t\tif ( material.side === THREE.DoubleSide || checkBackfaceCulling( v1, v2, v3 ) === true ) {\n\n\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t_face.id = object.id;\n\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t_face.v3.copy( v3 );\n\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t// use first vertex normal as face normal\n\n\t\t\t\t_face.normalModel.fromArray( normals, a * 3 );\n\t\t\t\t_face.normalModel.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\tfor ( var i = 0; i < 3; i ++ ) {\n\n\t\t\t\t\tvar normal = _face.vertexNormalsModel[ i ];\n\t\t\t\t\tnormal.fromArray( normals, arguments[ i ] * 3 );\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t\tvar uv = _face.uvs[ i ];\n\t\t\t\t\tuv.fromArray( uvs, arguments[ i ] * 2 );\n\n\t\t\t\t}\n\n\t\t\t\t_face.vertexNormalsLength = 3;\n\n\t\t\t\t_face.material = object.material;\n\n\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn {\n\t\t\tsetObject: setObject,\n\t\t\tprojectVertex: projectVertex,\n\t\t\tcheckTriangleVisibility: checkTriangleVisibility,\n\t\t\tcheckBackfaceCulling: checkBackfaceCulling,\n\t\t\tpushVertex: pushVertex,\n\t\t\tpushNormal: pushNormal,\n\t\t\tpushColor: pushColor,\n\t\t\tpushUv: pushUv,\n\t\t\tpushLine: pushLine,\n\t\t\tpushTriangle: pushTriangle\n\t\t};\n\n\t};\n\n\tvar renderList = new RenderList();\n\n\tfunction projectObject( object ) {\n\n\t\tif ( object.visible === false ) return;\n\n\t\tif ( object instanceof THREE.Light ) {\n\n\t\t\t_renderData.lights.push( object );\n\n\t\t} else if ( object instanceof THREE.Mesh || object instanceof THREE.Line || object instanceof THREE.Points ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsObject( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\tif ( object.material.visible === false ) return;\n\t\t\tif ( object.frustumCulled === true && _frustum.intersectsSprite( object ) === false ) return;\n\n\t\t\taddObject( object );\n\n\t\t}\n\n\t\tvar children = object.children;\n\n\t\tfor ( var i = 0, l = children.length; i < l; i ++ ) {\n\n\t\t\tprojectObject( children[ i ] );\n\n\t\t}\n\n\t}\n\n\tfunction addObject( object ) {\n\n\t\t_object = getNextObjectInPool();\n\t\t_object.id = object.id;\n\t\t_object.object = object;\n\n\t\t_vector3.setFromMatrixPosition( object.matrixWorld );\n\t\t_vector3.applyMatrix4( _viewProjectionMatrix );\n\t\t_object.z = _vector3.z;\n\t\t_object.renderOrder = object.renderOrder;\n\n\t\t_renderData.objects.push( _object );\n\n\t}\n\n\tthis.projectScene = function ( scene, camera, sortObjects, sortElements ) {\n\n\t\t_faceCount = 0;\n\t\t_lineCount = 0;\n\t\t_spriteCount = 0;\n\n\t\t_renderData.elements.length = 0;\n\n\t\tif ( scene.autoUpdate === true ) scene.updateMatrixWorld();\n\t\tif ( camera.parent === null ) camera.updateMatrixWorld();\n\n\t\t_viewMatrix.copy( camera.matrixWorldInverse );\n\t\t_viewProjectionMatrix.multiplyMatrices( camera.projectionMatrix, _viewMatrix );\n\n\t\t_frustum.setFromMatrix( _viewProjectionMatrix );\n\n\t\t//\n\n\t\t_objectCount = 0;\n\n\t\t_renderData.objects.length = 0;\n\t\t_renderData.lights.length = 0;\n\n\t\tprojectObject( scene );\n\n\t\tif ( sortObjects === true ) {\n\n\t\t\t_renderData.objects.sort( painterSort );\n\n\t\t}\n\n\t\t//\n\n\t\tvar objects = _renderData.objects;\n\n\t\tfor ( var o = 0, ol = objects.length; o < ol; o ++ ) {\n\n\t\t\tvar object = objects[ o ].object;\n\t\t\tvar geometry = object.geometry;\n\n\t\t\trenderList.setObject( object );\n\n\t\t\t_modelMatrix = object.matrixWorld;\n\n\t\t\t_vertexCount = 0;\n\n\t\t\tif ( object instanceof THREE.Mesh ) {\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\t\t\t\t\tvar groups = geometry.groups;\n\n\t\t\t\t\tif ( attributes.position === undefined ) continue;\n\n\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.normal !== undefined ) {\n\n\t\t\t\t\t\tvar normals = attributes.normal.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = normals.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushNormal( normals[ i ], normals[ i + 1 ], normals[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attributes.uv !== undefined ) {\n\n\t\t\t\t\t\tvar uvs = attributes.uv.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = uvs.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\trenderList.pushUv( uvs[ i ], uvs[ i + 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\tif ( groups.length > 0 ) {\n\n\t\t\t\t\t\t\tfor ( var g = 0; g < groups.length; g ++ ) {\n\n\t\t\t\t\t\t\t\tvar group = groups[ g ];\n\n\t\t\t\t\t\t\t\tfor ( var i = group.start, l = group.start + group.count; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushTriangle( indices[ i ], indices[ i + 1 ], indices[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length / 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushTriangle( i, i + 1, i + 2 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = geometry.vertices;\n\t\t\t\t\tvar faces = geometry.faces;\n\t\t\t\t\tvar faceVertexUvs = geometry.faceVertexUvs[ 0 ];\n\n\t\t\t\t\t_normalMatrix.getNormalMatrix( _modelMatrix );\n\n\t\t\t\t\tvar material = object.material;\n\n\t\t\t\t\tvar isMultiMaterial = Array.isArray( material );\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector3.copy( vertex );\n\n\t\t\t\t\t\tif ( material.morphTargets === true ) {\n\n\t\t\t\t\t\t\tvar morphTargets = geometry.morphTargets;\n\t\t\t\t\t\t\tvar morphInfluences = object.morphTargetInfluences;\n\n\t\t\t\t\t\t\tfor ( var t = 0, tl = morphTargets.length; t < tl; t ++ ) {\n\n\t\t\t\t\t\t\t\tvar influence = morphInfluences[ t ];\n\n\t\t\t\t\t\t\t\tif ( influence === 0 ) continue;\n\n\t\t\t\t\t\t\t\tvar target = morphTargets[ t ];\n\t\t\t\t\t\t\t\tvar targetVertex = target.vertices[ v ];\n\n\t\t\t\t\t\t\t\t_vector3.x += ( targetVertex.x - vertex.x ) * influence;\n\t\t\t\t\t\t\t\t_vector3.y += ( targetVertex.y - vertex.y ) * influence;\n\t\t\t\t\t\t\t\t_vector3.z += ( targetVertex.z - vertex.z ) * influence;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\trenderList.pushVertex( _vector3.x, _vector3.y, _vector3.z );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var f = 0, fl = faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\t\tvar face = faces[ f ];\n\n\t\t\t\t\t\tmaterial = isMultiMaterial === true\n\t\t\t\t\t\t\t ? object.material[ face.materialIndex ]\n\t\t\t\t\t\t\t : object.material;\n\n\t\t\t\t\t\tif ( material === undefined ) continue;\n\n\t\t\t\t\t\tvar side = material.side;\n\n\t\t\t\t\t\tvar v1 = _vertexPool[ face.a ];\n\t\t\t\t\t\tvar v2 = _vertexPool[ face.b ];\n\t\t\t\t\t\tvar v3 = _vertexPool[ face.c ];\n\n\t\t\t\t\t\tif ( renderList.checkTriangleVisibility( v1, v2, v3 ) === false ) continue;\n\n\t\t\t\t\t\tvar visible = renderList.checkBackfaceCulling( v1, v2, v3 );\n\n\t\t\t\t\t\tif ( side !== THREE.DoubleSide ) {\n\n\t\t\t\t\t\t\tif ( side === THREE.FrontSide && visible === false ) continue;\n\t\t\t\t\t\t\tif ( side === THREE.BackSide && visible === true ) continue;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face = getNextFaceInPool();\n\n\t\t\t\t\t\t_face.id = object.id;\n\t\t\t\t\t\t_face.v1.copy( v1 );\n\t\t\t\t\t\t_face.v2.copy( v2 );\n\t\t\t\t\t\t_face.v3.copy( v3 );\n\n\t\t\t\t\t\t_face.normalModel.copy( face.normal );\n\n\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t_face.normalModel.negate();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.normalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\tvar faceVertexNormals = face.vertexNormals;\n\n\t\t\t\t\t\tfor ( var n = 0, nl = Math.min( faceVertexNormals.length, 3 ); n < nl; n ++ ) {\n\n\t\t\t\t\t\t\tvar normalModel = _face.vertexNormalsModel[ n ];\n\t\t\t\t\t\t\tnormalModel.copy( faceVertexNormals[ n ] );\n\n\t\t\t\t\t\t\tif ( visible === false && ( side === THREE.BackSide || side === THREE.DoubleSide ) ) {\n\n\t\t\t\t\t\t\t\tnormalModel.negate();\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tnormalModel.applyMatrix3( _normalMatrix ).normalize();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.vertexNormalsLength = faceVertexNormals.length;\n\n\t\t\t\t\t\tvar vertexUvs = faceVertexUvs[ f ];\n\n\t\t\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\t\t\tfor ( var u = 0; u < 3; u ++ ) {\n\n\t\t\t\t\t\t\t\t_face.uvs[ u ].copy( vertexUvs[ u ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_face.color = face.color;\n\t\t\t\t\t\t_face.material = material;\n\n\t\t\t\t\t\t_face.z = ( v1.positionScreen.z + v2.positionScreen.z + v3.positionScreen.z ) / 3;\n\t\t\t\t\t\t_face.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t_renderData.elements.push( _face );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Line ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\trenderList.pushVertex( positions[ i ], positions[ i + 1 ], positions[ i + 2 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( attributes.color !== undefined ) {\n\n\t\t\t\t\t\t\tvar colors = attributes.color.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = colors.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushColor( colors[ i ], colors[ i + 1 ], colors[ i + 2 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( geometry.index !== null ) {\n\n\t\t\t\t\t\t\tvar indices = geometry.index.array;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = indices.length; i < l; i += 2 ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( indices[ i ], indices[ i + 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\t\t\tfor ( var i = 0, l = ( positions.length / 3 ) - 1; i < l; i += step ) {\n\n\t\t\t\t\t\t\t\trenderList.pushLine( i, i + 1 );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tif ( vertices.length === 0 ) continue;\n\n\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\tv1.positionScreen.copy( vertices[ 0 ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\tvar step = object instanceof THREE.LineSegments ? 2 : 1;\n\n\t\t\t\t\tfor ( var v = 1, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tv1 = getNextVertexInPool();\n\t\t\t\t\t\tv1.positionScreen.copy( vertices[ v ] ).applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tif ( ( v + 1 ) % step > 0 ) continue;\n\n\t\t\t\t\t\tv2 = _vertexPool[ _vertexCount - 2 ];\n\n\t\t\t\t\t\t_clippedVertex1PositionScreen.copy( v1.positionScreen );\n\t\t\t\t\t\t_clippedVertex2PositionScreen.copy( v2.positionScreen );\n\n\t\t\t\t\t\tif ( clipLine( _clippedVertex1PositionScreen, _clippedVertex2PositionScreen ) === true ) {\n\n\t\t\t\t\t\t\t// Perform the perspective divide\n\t\t\t\t\t\t\t_clippedVertex1PositionScreen.multiplyScalar( 1 / _clippedVertex1PositionScreen.w );\n\t\t\t\t\t\t\t_clippedVertex2PositionScreen.multiplyScalar( 1 / _clippedVertex2PositionScreen.w );\n\n\t\t\t\t\t\t\t_line = getNextLineInPool();\n\n\t\t\t\t\t\t\t_line.id = object.id;\n\t\t\t\t\t\t\t_line.v1.positionScreen.copy( _clippedVertex1PositionScreen );\n\t\t\t\t\t\t\t_line.v2.positionScreen.copy( _clippedVertex2PositionScreen );\n\n\t\t\t\t\t\t\t_line.z = Math.max( _clippedVertex1PositionScreen.z, _clippedVertex2PositionScreen.z );\n\t\t\t\t\t\t\t_line.renderOrder = object.renderOrder;\n\n\t\t\t\t\t\t\t_line.material = object.material;\n\n\t\t\t\t\t\t\tif ( object.material.vertexColors === THREE.VertexColors ) {\n\n\t\t\t\t\t\t\t\t_line.vertexColors[ 0 ].copy( object.geometry.colors[ v ] );\n\t\t\t\t\t\t\t\t_line.vertexColors[ 1 ].copy( object.geometry.colors[ v - 1 ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t_renderData.elements.push( _line );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Points ) {\n\n\t\t\t\t_modelViewProjectionMatrix.multiplyMatrices( _viewProjectionMatrix, _modelMatrix );\n\n\t\t\t\tif ( geometry instanceof THREE.Geometry ) {\n\n\t\t\t\t\tvar vertices = object.geometry.vertices;\n\n\t\t\t\t\tfor ( var v = 0, vl = vertices.length; v < vl; v ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertices[ v ];\n\n\t\t\t\t\t\t_vector4.set( vertex.x, vertex.y, vertex.z, 1 );\n\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( geometry instanceof THREE.BufferGeometry ) {\n\n\t\t\t\t\tvar attributes = geometry.attributes;\n\n\t\t\t\t\tif ( attributes.position !== undefined ) {\n\n\t\t\t\t\t\tvar positions = attributes.position.array;\n\n\t\t\t\t\t\tfor ( var i = 0, l = positions.length; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t_vector4.set( positions[ i ], positions[ i + 1 ], positions[ i + 2 ], 1 );\n\t\t\t\t\t\t\t_vector4.applyMatrix4( _modelViewProjectionMatrix );\n\n\t\t\t\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} else if ( object instanceof THREE.Sprite ) {\n\n\t\t\t\t_vector4.set( _modelMatrix.elements[ 12 ], _modelMatrix.elements[ 13 ], _modelMatrix.elements[ 14 ], 1 );\n\t\t\t\t_vector4.applyMatrix4( _viewProjectionMatrix );\n\n\t\t\t\tpushPoint( _vector4, object, camera );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( sortElements === true ) {\n\n\t\t\t_renderData.elements.sort( painterSort );\n\n\t\t}\n\n\t\treturn _renderData;\n\n\t};\n\n\tfunction pushPoint( _vector4, object, camera ) {\n\n\t\tvar invW = 1 / _vector4.w;\n\n\t\t_vector4.z *= invW;\n\n\t\tif ( _vector4.z >= - 1 && _vector4.z <= 1 ) {\n\n\t\t\t_sprite = getNextSpriteInPool();\n\t\t\t_sprite.id = object.id;\n\t\t\t_sprite.x = _vector4.x * invW;\n\t\t\t_sprite.y = _vector4.y * invW;\n\t\t\t_sprite.z = _vector4.z;\n\t\t\t_sprite.renderOrder = object.renderOrder;\n\t\t\t_sprite.object = object;\n\n\t\t\t_sprite.rotation = object.rotation;\n\n\t\t\t_sprite.scale.x = object.scale.x * Math.abs( _sprite.x - ( _vector4.x + camera.projectionMatrix.elements[ 0 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 12 ] ) );\n\t\t\t_sprite.scale.y = object.scale.y * Math.abs( _sprite.y - ( _vector4.y + camera.projectionMatrix.elements[ 5 ] ) / ( _vector4.w + camera.projectionMatrix.elements[ 13 ] ) );\n\n\t\t\t_sprite.material = object.material;\n\n\t\t\t_renderData.elements.push( _sprite );\n\n\t\t}\n\n\t}\n\n\t// Pools\n\n\tfunction getNextObjectInPool() {\n\n\t\tif ( _objectCount === _objectPoolLength ) {\n\n\t\t\tvar object = new THREE.RenderableObject();\n\t\t\t_objectPool.push( object );\n\t\t\t_objectPoolLength ++;\n\t\t\t_objectCount ++;\n\t\t\treturn object;\n\n\t\t}\n\n\t\treturn _objectPool[ _objectCount ++ ];\n\n\t}\n\n\tfunction getNextVertexInPool() {\n\n\t\tif ( _vertexCount === _vertexPoolLength ) {\n\n\t\t\tvar vertex = new THREE.RenderableVertex();\n\t\t\t_vertexPool.push( vertex );\n\t\t\t_vertexPoolLength ++;\n\t\t\t_vertexCount ++;\n\t\t\treturn vertex;\n\n\t\t}\n\n\t\treturn _vertexPool[ _vertexCount ++ ];\n\n\t}\n\n\tfunction getNextFaceInPool() {\n\n\t\tif ( _faceCount === _facePoolLength ) {\n\n\t\t\tvar face = new THREE.RenderableFace();\n\t\t\t_facePool.push( face );\n\t\t\t_facePoolLength ++;\n\t\t\t_faceCount ++;\n\t\t\treturn face;\n\n\t\t}\n\n\t\treturn _facePool[ _faceCount ++ ];\n\n\n\t}\n\n\tfunction getNextLineInPool() {\n\n\t\tif ( _lineCount === _linePoolLength ) {\n\n\t\t\tvar line = new THREE.RenderableLine();\n\t\t\t_linePool.push( line );\n\t\t\t_linePoolLength ++;\n\t\t\t_lineCount ++;\n\t\t\treturn line;\n\n\t\t}\n\n\t\treturn _linePool[ _lineCount ++ ];\n\n\t}\n\n\tfunction getNextSpriteInPool() {\n\n\t\tif ( _spriteCount === _spritePoolLength ) {\n\n\t\t\tvar sprite = new THREE.RenderableSprite();\n\t\t\t_spritePool.push( sprite );\n\t\t\t_spritePoolLength ++;\n\t\t\t_spriteCount ++;\n\t\t\treturn sprite;\n\n\t\t}\n\n\t\treturn _spritePool[ _spriteCount ++ ];\n\n\t}\n\n\t//\n\n\tfunction painterSort( a, b ) {\n\n\t\tif ( a.renderOrder !== b.renderOrder ) {\n\n\t\t\treturn a.renderOrder - b.renderOrder;\n\n\t\t} else if ( a.z !== b.z ) {\n\n\t\t\treturn b.z - a.z;\n\n\t\t} else if ( a.id !== b.id ) {\n\n\t\t\treturn a.id - b.id;\n\n\t\t} else {\n\n\t\t\treturn 0;\n\n\t\t}\n\n\t}\n\n\tfunction clipLine( s1, s2 ) {\n\n\t\tvar alpha1 = 0, alpha2 = 1,\n\n\t\t// Calculate the boundary coordinate of each vertex for the near and far clip planes,\n\t\t// Z = -1 and Z = +1, respectively.\n\n\t\t\tbc1near = s1.z + s1.w,\n\t\t\tbc2near = s2.z + s2.w,\n\t\t\tbc1far = - s1.z + s1.w,\n\t\t\tbc2far = - s2.z + s2.w;\n\n\t\tif ( bc1near >= 0 && bc2near >= 0 && bc1far >= 0 && bc2far >= 0 ) {\n\n\t\t\t// Both vertices lie entirely within all clip planes.\n\t\t\treturn true;\n\n\t\t} else if ( ( bc1near < 0 && bc2near < 0 ) || ( bc1far < 0 && bc2far < 0 ) ) {\n\n\t\t\t// Both vertices lie entirely outside one of the clip planes.\n\t\t\treturn false;\n\n\t\t} else {\n\n\t\t\t// The line segment spans at least one clip plane.\n\n\t\t\tif ( bc1near < 0 ) {\n\n\t\t\t\t// v1 lies outside the near plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t} else if ( bc2near < 0 ) {\n\n\t\t\t\t// v2 lies outside the near plane, v1 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1near / ( bc1near - bc2near ) );\n\n\t\t\t}\n\n\t\t\tif ( bc1far < 0 ) {\n\n\t\t\t\t// v1 lies outside the far plane, v2 inside\n\t\t\t\talpha1 = Math.max( alpha1, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t} else if ( bc2far < 0 ) {\n\n\t\t\t\t// v2 lies outside the far plane, v2 inside\n\t\t\t\talpha2 = Math.min( alpha2, bc1far / ( bc1far - bc2far ) );\n\n\t\t\t}\n\n\t\t\tif ( alpha2 < alpha1 ) {\n\n\t\t\t\t// The line segment spans two boundaries, but is outside both of them.\n\t\t\t\t// (This can't happen when we're only clipping against just near/far but good\n\t\t\t\t//  to leave the check here for future usage if other clip planes are added.)\n\t\t\t\treturn false;\n\n\t\t\t} else {\n\n\t\t\t\t// Update the s1 and s2 vertices to match the clipped line segment.\n\t\t\t\ts1.lerp( s2, alpha1 );\n\t\t\t\ts2.lerp( s1, 1 - alpha2 );\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n};\n"]}