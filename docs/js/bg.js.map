{"version":3,"sources":["js/bg.js"],"names":["particleColor","camera","scene","renderer","canvasHeight","SEPARATION","AMOUNTX","particles","mouseY","setTimeout","container","classList","querySelector","clientWidth","document","createElement","add","mouseX","remove","windowHalfX","getCanvasContainerWidth","windowHalfY","init","animate","THREE","Scene","PI2","Math","PI","SpriteCanvasMaterial","program","context","material","arc","color","i","ix","iy","AMOUNTY","particle","Sprite","position","x","CanvasRenderer","setPixelRatio","window","devicePixelRatio","addEventListener","onWindowResize","canvasContainerWidth","updateProjectionMatrix","setSize","requestAnimationFrame","render","set","scale","y","sin","count"],"mappings":"aACA,IAIIA,UAGAC,OAAQC,MAAOC,SAAfF,UAAQC,SAPRE,aAAe,IADnBC,WAAA,IACID,QAAAA,GACAC,QAAAA,GACAC,cAAJ,UAKmBH,MAAnB,EAEII,OAAJ,EAAAC,OAAA,EAOAC,SAAAA,0BACIC,OAAUC,SAAVC,cAA2B,qBAA3BC,aARJH,UAAiCI,SAAjCC,cAAA,QAKUJ,UAAUK,IAAI,oBAHxBN,UAAIO,UAAJD,IAAA,UAAAP,WAAgBD,WAMZE,UAAUC,UAAUO,OAAO,WAJ/BR,KACAA,SAAAA,KAAUC,YAAcD,WAWxB,IAAIS,YAAcC,0BAA4B,EAJ9CC,YAASD,aAAT,EAKA,SAAIC,QAEJC,OAAAA,IAAAA,MAAAA,kBAAAA,GAAAA,0BAAAA,aAAAA,EAAAA,MACAC,SAAAA,EAAAA,IAEArB,MAASoB,IAATE,MAAgBC,MAEfxB,UAAS,IAAIuB,MAQkC,IAD/C,IAAIE,EAAgB,EAAVC,KAAKC,GAJf1B,EAAYsB,IAAMC,MAAlBI,qBAAA,CAEAtB,MAAAA,cAMCuB,QAAS,SAAWC,GAHrBA,EAAIC,YAMFD,EAAQE,IAAK,EAAG,EAAG,GAAK,EAAGP,GAAK,GAJjCQ,EAAOlC,UAONmC,EAAA,EATFC,EAAA,EAAAA,EAAA9B,QAAA8B,IAaA,IAAID,IAAJE,EAAA,EAAAA,EAAAC,QAAAD,KAEAE,SAAUH,UAAa9B,KAAS8B,IAAQZ,MAAAgB,OAAAR,IAK7BS,SAASC,EAAIN,EAAK/B,WAAiBC,QAAUD,WAAe,EAHtEkC,SAAUF,SAAQA,EAAKC,EAAAA,WAAiBA,QAAAjC,WAAA,EAKvCH,MAAMc,IAAKuB,WAIZpC,SAAA,IAAAqB,MAAAmB,gBAGQC,cAAeC,OAAOC,kBAD/B3C,SAAAA,QAAeqB,0BAAfpB,cACAD,UAASyC,YAAeC,SAAOC,YAQ/BD,OAAOE,iBAAkB,SAAUC,gBAAgB,GAKlD,SAAIC,iBAAJ,IAAIA,EAAuB7B,0BAG5BC,YAAcjB,EAAd,EAAAiB,YAAcjB,aAAe,EAG7BH,OAAOiD,OAAAA,EAAP9C,aAAAH,OAAOiD,yBAIP/C,SAAAgD,QAAAF,EAAA7C,cAQAgD,SAAAA,UAEAC,sBAAAA,SAAAA,SAID,SAASA,SAORpD,OAAMwC,SAANa,IAAkBlB,EAAK9B,IAAAA,KAIrBiC,IAFD,IAAAJ,EAAM,EAELI,EAAWhC,EAAAA,EAAW4B,QAAtBC,IAGAG,IAAAA,IAASgB,EAAT,EAAAlB,EAAmBE,QAASgB,KAK7BhB,SAAAhC,UAAA4B,MAPUM,SAASe,EAAyC,GAAnC7B,KAAK8B,IAAsB,IAAfrB,EAAKsB,QAS3C,GAAAvD,KAASkD,IAAT,IAAiBnD,EAAjBwD,QAPEnB,SAASgB,MAAMb,EAAIH,SAASgB,MAAMC,EAA+C,GAAzC7B,KAAK8B,IAAsB,IAAfrB,EAAKsB,QAAkB,GAS7E,GAAAA,KAASD,IAAT,IAAApB,EAAAqB,QAAA,GAFAvD,SAASkD,OAAQnD,MAAOD,QAExByD,OAAS,GA3GTpC,OAMDC","file":"bg.js","sourcesContent":["// minOnSave: true, minifier: uglify-js\nvar canvasHeight = 400;\nvar SEPARATION = 100;\nvar AMOUNTX = 80;\nvar AMOUNTY = 40;\nvar particleColor = \"#3f3f3f\";\n\nvar container;\nvar camera, scene, renderer;\n\nvar particles, particle, count = 0;\n\nvar mouseX = 0, mouseY = 0;\n\ncontainer = document.createElement( 'div' );\ncontainer.classList.add(\"canvas-container\");\ncontainer.classList.add(\"hidden\");\nsetTimeout(function() {\n    container.classList.remove(\"hidden\");\n}, 1000);\ndocument.body.appendChild( container );\n\nfunction getCanvasContainerWidth() {\n    return document.querySelector(\".canvas-container\").clientWidth;\n}\n\nvar windowHalfX = getCanvasContainerWidth() / 2;\nvar windowHalfY = canvasHeight / 2;\n\ninit();\nanimate();\n\nfunction init() {\n\n\tcamera = new THREE.PerspectiveCamera( 75, getCanvasContainerWidth() / canvasHeight, 1, 10000 );\n\tcamera.position.z = 10000;\n\n\tscene = new THREE.Scene();\n\n\tparticles = new Array();\n\n\tvar PI2 = Math.PI * 2;\n\tvar material = new THREE.SpriteCanvasMaterial( {\n\n\t\tcolor: particleColor,\n\t\tprogram: function ( context ) {\n\n\t\t\tcontext.beginPath();\n\t\t\tcontext.arc( 0, 0, 0.5, 0, PI2, true );\n\t\t\tcontext.fill();\n\n\t\t}\n\n\t} );\n\n\tvar i = 0;\n\n\tfor ( var ix = 0; ix < AMOUNTX; ix ++ ) {\n\n\t\tfor ( var iy = 0; iy < AMOUNTY; iy ++ ) {\n\n\t\t\tparticle = particles[ i ++ ] = new THREE.Sprite( material );\n\t\t\tparticle.position.x = ix * SEPARATION - ( ( AMOUNTX * SEPARATION ) / 2 );\n\t\t\tparticle.position.z = iy * SEPARATION - ( ( AMOUNTY * SEPARATION ) / 2 );\n\t\t\tscene.add( particle );\n\n\t\t}\n\n\t}\n\n\trenderer = new THREE.CanvasRenderer();\n\trenderer.setPixelRatio( window.devicePixelRatio );\n\trenderer.setSize( getCanvasContainerWidth(), canvasHeight );\n\tcontainer.appendChild( renderer.domElement );\n\n\n\n\t//\n\n\twindow.addEventListener( 'resize', onWindowResize, false );\n\n}\n\nfunction onWindowResize() {\n  var canvasContainerWidth = getCanvasContainerWidth();\n\n\twindowHalfX = canvasContainerWidth / 2;\n\twindowHalfY = canvasHeight / 2;\n\n\tcamera.aspect = canvasContainerWidth / canvasHeight;\n\tcamera.updateProjectionMatrix();\n\n\trenderer.setSize( canvasContainerWidth, canvasHeight );\n\n}\n\n//\n\n//\n\nfunction animate() {\n\n\trequestAnimationFrame( animate );\n\n\trender();\n\n}\n\nfunction render() {\n\n\n\tcamera.position.set(0,355,122);\n\n\tvar i = 0;\n\n\tfor ( var ix = 0; ix < AMOUNTX; ix ++ ) {\n\n\t\tfor ( var iy = 0; iy < AMOUNTY; iy ++ ) {\n\n\t\t\tparticle = particles[ i++ ];\n\t\t\tparticle.position.y = ( Math.sin( ( ix + count ) * 0.3 ) * 50 ) +\n\t\t\t\t( Math.sin( ( iy + count ) * 0.5 ) * 50 );\n\t\t\tparticle.scale.x = particle.scale.y = ( Math.sin( ( ix + count ) * 0.3 ) + 1 ) * 4 +\n\t\t\t\t( Math.sin( ( iy + count ) * 0.5 ) + 1 ) * 4;\n\n\t\t}\n\n\t}\n\n\trenderer.render( scene, camera );\n\n\tcount += 0.1;\n\n}\n"]}